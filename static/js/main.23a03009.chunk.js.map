{"version":3,"sources":["components/Box.jsx","components/GameBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["Box","flipCells","e","props","handleFlipCells","cood","boxClass","this","clicked","onClick","className","Component","GameBoard","state","isColoured","gameOver","startGame","hasWon","componentDidMount","setState","genBoard","numRows","numCols","arr","temp","i","j","markFieldTrue","row","col","Math","floor","random","renderBoxes","tboard","push","key","reduce","a","b","c","d","split","map","n","parseInt","x","y","flipCell","boxes","length","Fragment","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.23a03009.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Box.css\";\r\n\r\nclass Box extends Component {\r\n  flipCells = e => {\r\n    this.props.handleFlipCells(this.props.cood);\r\n  };\r\n  render() {\r\n    const { clicked } = this.props;\r\n    const boxClass = clicked ? \"box box-color\" : \"box\";\r\n    return <td onClick={this.flipCells} className={boxClass}></td>;\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","import React, { Component } from \"react\";\r\nimport Box from \"./Box\";\r\nimport \"./GameBoard.css\";\r\n\r\nclass GameBoard extends Component {\r\n  static defaultProps = {\r\n    numRows: 5,\r\n    numCols: 5\r\n  };\r\n  state = {\r\n    isColoured: [],\r\n    gameOver: false,\r\n    startGame: false,\r\n    hasWon: false\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    this.setState({ isColoured: this.genBoard() });\r\n  };\r\n\r\n  // funtion to display board\r\n  genBoard = () => {\r\n    const { numRows, numCols } = this.props;\r\n    let arr = [];\r\n    let temp = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      temp = [];\r\n      for (let j = 0; j < numCols; j++) {\r\n        temp[j] = false;\r\n      }\r\n      arr[i] = temp;\r\n    }\r\n    return this.markFieldTrue(arr);\r\n  };\r\n\r\n  // mark few fields true\r\n  markFieldTrue = arr => {\r\n    let row, col;\r\n    for (let i = 0; i < 5; i++) {\r\n      row = Math.floor(Math.random() * 5);\r\n      col = Math.floor(Math.random() * 5);\r\n      arr[row][col] = true;\r\n    }\r\n    return arr;\r\n  };\r\n\r\n  // function to render boxes\r\n  renderBoxes = () => {\r\n    const { numCols, numRows } = this.props;\r\n    const { isColoured } = this.state;\r\n    let tboard = [];\r\n    for (let i = 0; i < numRows; i++) {\r\n      let row = [];\r\n      for (let j = 0; j < numCols; j++) {\r\n        let cood = j + \"-\" + i;\r\n        row.push(\r\n          <Box\r\n            key={cood}\r\n            cood={i + \"-\" + j}\r\n            handleFlipCells={this.handleFlipCells}\r\n            clicked={isColoured[i][j]}\r\n          />\r\n        );\r\n      }\r\n      tboard.push(<tr key={i}>{row}</tr>);\r\n    }\r\n    return tboard;\r\n  };\r\n\r\n  // function to check if a user has won\r\n  hasWon = () => {\r\n    const isColoured = [...this.state.isColoured];\r\n    let hasWon = isColoured.reduce(\r\n      (a, b) => a && b.reduce((c, d) => c && d),\r\n      true\r\n    );\r\n    this.setState({ hasWon });\r\n  };\r\n\r\n  // function to flip surrounding cells\r\n  handleFlipCells = cood => {\r\n    this.hasWon();\r\n    const { numCols, numRows } = this.props;\r\n    let isColoured = [...this.state.isColoured];\r\n    let [x, y] = cood.split(\"-\").map(n => parseInt(n));\r\n\r\n    const flipCell = (x, y) => {\r\n      if (x >= 0 && x < numRows && y >= 0 && y < numCols) {\r\n        isColoured[x][y] = !isColoured[x][y];\r\n      }\r\n    };\r\n\r\n    // flip current cell\r\n    flipCell(x, y);\r\n    // flip cell above\r\n    flipCell(x - 1, y);\r\n    // flip cell below\r\n    flipCell(x + 1, y);\r\n    // flip cell to the right\r\n    flipCell(x, y + 1);\r\n    // flip cell to the left\r\n    flipCell(x, y - 1);\r\n\r\n    this.setState(() => {\r\n      return {\r\n        isColoured\r\n      };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { isColoured, hasWon } = this.state;\r\n    const { numRows } = this.props;\r\n    let boxes = [];\r\n    if (isColoured.length === numRows) boxes = this.renderBoxes();\r\n    return (\r\n      <div className=\"light-game\">\r\n        {!hasWon && (\r\n          <React.Fragment>\r\n            <div className=\"board-title\">\r\n              <span className=\"neon-orange\">Lights</span>{\" \"}\r\n              <span className=\"neon-blue\">Out</span>\r\n            </div>\r\n            <table className=\"board\">\r\n              <tbody className=\"box-row\">{boxes}</tbody>\r\n            </table>\r\n          </React.Fragment>\r\n        )}\r\n        {hasWon && (\r\n          <div className=\"winner\">\r\n            <span className=\"neon-orange\">You</span>{\" \"}\r\n            <span className=\"neon-blue\">Win</span>{\" \"}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameBoard;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport GameBoard from \"./components/GameBoard\";\n\nfunction App() {\n  return ( <\n    div className = \"App\" >\n    <\n    GameBoard / >\n    <\n    /div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}